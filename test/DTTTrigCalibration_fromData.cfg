process TTRIGCALIBPROC = {
    
    include "CondCore/DBCommon/data/CondDBSetup.cfi"

    #Mapping    
    es_source mapping = PoolDBESSource { 
	using CondDBSetup
	string connect = "sqlite_file:map.db"
	string timetype = "runnumber"    
	untracked uint32 authenticationMethod = 0
	VPSet toGet = {
	    {string record = "DTReadOutMappingRcd"
		string tag = "channelsMap"}
	}
    }
    
    #   source = DaqSource{ string reader = "DTDDUFileReader"
    # 	untracked int32 maxEvents = 10
    # 	PSet pset = { string fileName ="rfio:/castor/cern.ch/cms/MTCC/data/00000558/DT/mtcc.00000558.DT.LocalDaq_B_off.0.raw"
    # 	    untracked bool isRaw = true }
    #     }
    
    #     module dtunpacker = DTUnpackingModule{
    # 	string dataType = "DDU"
    # 	untracked bool debugMode = false
    # 	untracked bool readingDDU = true
    # 	untracked bool isRaw = true
    # 	untracked bool globalDAQ = false
    # 	untracked int32 dduID = 770
    # 	untracked bool performDataIntegrityMonitor = false 
    #     }

    #Event data source
    source = PoolSource {
	untracked vstring fileNames = {
	    'rfio:/castor/cern.ch/cms/MTCC/data/00004333/A/mtcc.00004333.A.testStorageManager_0.0.root'
	}  
        untracked uint32 debugVebosity = 10
	untracked bool debugFlag = true
	untracked int32 maxEvents = -1
    }
    
    module dtunpacker = DTUnpackingModule{
    string dataType = "DDU"
    untracked bool debugMode = false
    untracked bool readingDDU = true
    untracked bool isRaw = false
    untracked bool globalDAQ = true
    untracked int32 dduID = 770
    untracked bool performDataIntegrityMonitor = false
    }

    
    include "Geometry/MuonCommonData/data/muonIdealGeometryXML.cfi"
    include "Geometry/DTGeometry/data/dtGeometry.cfi"
    
    
    # The tzero from DB
    es_source TZero = PoolDBESSource {
	using CondDBSetup
	string connect =  "sqlite_file:tzero.db"
	string timetype = "runnumber"    
	untracked uint32 authenticationMethod = 0
	VPSet toGet = {{
		string record = "DTT0Rcd"
		string tag = "tzero"
	    }}
    }

    #Map of noisy channel
    es_source Noise = PoolDBESSource {
	using CondDBSetup
	string connect =  "sqlite_file:noise.db"
	string timetype = "runnumber"    
	untracked uint32 authenticationMethod = 0
	VPSet toGet = {{
		string record = "DTStatusFlagRcd" 
		string tag = "noise"
	    }}
    }
    
    #Service to write DB if ttrigcalib.findTMeanAndSigma is true
    service = PoolDBOutputService{
	string connect = "sqlite_file:ttrig.db"    	
	string timetype = "runnumber"    
	untracked uint32 authenticationMethod = 0
	PSet DBParameters = {}
	VPSet toPut={{
		string record = "DTTtrigRcd"
		string tag ="ttrig"
	    }}
    } 
    
    
    #Module to calibrate ttrig
    module ttrigcalib = DTTTrigCalibration {
	# Switch on/off the verbosity
	untracked bool debug = false
	
	# Label to retrieve DT digis from the event
	untracked string digiLabel = "dtunpacker"
	# Name of the ROOT file which will contain the time boxes
	untracked string rootFileName = "DTTimeBoxes.root"
	# Switch on/off the subtraction of t0 from pulses
	untracked bool doSubtractT0 = true
	# Switch on/off the DB writing
	untracked bool fitAndWrite = false
	# Switch on/off the check of noisy channels
	untracked bool checkNoisyChannels = true
	# Max number of digi per layer to reject a chamber
	untracked int32 maxDigiPerLayer = 10

	# Module for t0 subtraction
	untracked string tTrigMode = 'DTTTrigSyncT0Only'
	# Parameter set for t0 subtraction module
	untracked PSet tTrigModeConfig = {
	    untracked bool debug = false
	}
    }	
    
    path p = {dtunpacker, ttrigcalib}

}

